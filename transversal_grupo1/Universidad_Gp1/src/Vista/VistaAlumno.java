/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vista;

import Modelo.alumno;
import Percistencia.alumnoData;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author arceb
 */
public class VistaAlumno extends javax.swing.JInternalFrame {

    /**
     * Creates new form VistaAlumno
     */
    
    private alumnoData aluData = new alumnoData();
    private alumno alumnoActual = null;
    
    private DefaultTableModel modelo = new DefaultTableModel();
    
    public VistaAlumno() {
        initComponents();
        cabecera();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelFondo = new javax.swing.JPanel();
        jlTitulo = new javax.swing.JLabel();
        jpDatos = new javax.swing.JPanel();
        jLabelDni = new javax.swing.JLabel();
        jtDni = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabelApellido = new javax.swing.JLabel();
        jtApellido = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        jLabelNombre = new javax.swing.JLabel();
        jtNombre = new javax.swing.JTextField();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        jtEstado = new javax.swing.JTextField();
        jSeparator4 = new javax.swing.JSeparator();
        jpBotones = new javax.swing.JPanel();
        jbGuardar = new javax.swing.JButton();
        jbActualizar = new javax.swing.JButton();
        jbAlta = new javax.swing.JButton();
        jbBaja = new javax.swing.JButton();
        jbEliminar = new javax.swing.JButton();
        jbListar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();
        botonBuscar = new javax.swing.JButton();
        jbCerrar = new javax.swing.JButton();

        jPanelFondo.setBackground(new java.awt.Color(0, 102, 153));

        jlTitulo.setFont(new java.awt.Font("Roboto", 1, 24)); // NOI18N
        jlTitulo.setText("Alumno");

        jpDatos.setBackground(new java.awt.Color(255, 255, 255));
        jpDatos.setForeground(new java.awt.Color(0, 102, 153));

        jLabelDni.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        jLabelDni.setText("D.N.I:");

        jtDni.setBorder(null);

        jLabelApellido.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        jLabelApellido.setText("Apellido:");

        jtApellido.setBorder(null);

        jLabelNombre.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        jLabelNombre.setText("Nombre:");

        jtNombre.setBorder(null);

        jLabel1.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        jLabel1.setText("Fecha de nacimiento:");

        jLabel2.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        jLabel2.setText("Estado:");

        jtEstado.setBorder(null);

        javax.swing.GroupLayout jpDatosLayout = new javax.swing.GroupLayout(jpDatos);
        jpDatos.setLayout(jpDatosLayout);
        jpDatosLayout.setHorizontalGroup(
            jpDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpDatosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabelDni)
                    .addComponent(jLabelApellido)
                    .addComponent(jtApellido)
                    .addComponent(jSeparator2)
                    .addComponent(jSeparator1)
                    .addComponent(jtDni)
                    .addComponent(jLabelNombre)
                    .addComponent(jtNombre)
                    .addComponent(jSeparator3)
                    .addComponent(jLabel1)
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE)
                    .addComponent(jLabel2)
                    .addComponent(jtEstado)
                    .addComponent(jSeparator4))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        jpDatosLayout.setVerticalGroup(
            jpDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpDatosLayout.createSequentialGroup()
                .addComponent(jLabelDni)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtDni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelApellido)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtApellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelNombre)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jpBotones.setBackground(new java.awt.Color(255, 255, 255));

        jbGuardar.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        jbGuardar.setText("Insertar");
        jbGuardar.setBorder(null);
        jbGuardar.setBorderPainted(false);
        jbGuardar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jbGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGuardarActionPerformed(evt);
            }
        });

        jbActualizar.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        jbActualizar.setText("Actualizar");
        jbActualizar.setBorder(null);
        jbActualizar.setBorderPainted(false);
        jbActualizar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jbActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbActualizarActionPerformed(evt);
            }
        });

        jbAlta.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        jbAlta.setText("Alta");
        jbAlta.setBorder(null);
        jbAlta.setBorderPainted(false);
        jbAlta.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jbAlta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAltaActionPerformed(evt);
            }
        });

        jbBaja.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        jbBaja.setText("Baja");
        jbBaja.setBorder(null);
        jbBaja.setBorderPainted(false);
        jbBaja.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jbBaja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBajaActionPerformed(evt);
            }
        });

        jbEliminar.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        jbEliminar.setText("Eliminar");
        jbEliminar.setBorder(null);
        jbEliminar.setBorderPainted(false);
        jbEliminar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jbEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEliminarActionPerformed(evt);
            }
        });

        jbListar.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        jbListar.setText("Listar");
        jbListar.setBorder(null);
        jbListar.setBorderPainted(false);
        jbListar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jbListar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbListarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpBotonesLayout = new javax.swing.GroupLayout(jpBotones);
        jpBotones.setLayout(jpBotonesLayout);
        jpBotonesLayout.setHorizontalGroup(
            jpBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpBotonesLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jpBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jpBotonesLayout.createSequentialGroup()
                        .addComponent(jbGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                        .addComponent(jbListar, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jpBotonesLayout.createSequentialGroup()
                        .addComponent(jbAlta, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbBaja, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jpBotonesLayout.createSequentialGroup()
                        .addComponent(jbActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(21, 21, 21))
        );
        jpBotonesLayout.setVerticalGroup(
            jpBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpBotonesLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jpBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbListar, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addGroup(jpBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbAlta, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbBaja, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(46, 46, 46)
                .addGroup(jpBotonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable);

        botonBuscar.setText("buscar");
        botonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBuscarActionPerformed(evt);
            }
        });

        jbCerrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/cerrar.png"))); // NOI18N
        jbCerrar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jbCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCerrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelFondoLayout = new javax.swing.GroupLayout(jPanelFondo);
        jPanelFondo.setLayout(jPanelFondoLayout);
        jPanelFondoLayout.setHorizontalGroup(
            jPanelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelFondoLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jpDatos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(jPanelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelFondoLayout.createSequentialGroup()
                        .addComponent(jlTitulo)
                        .addGap(201, 201, 201)
                        .addComponent(jbCerrar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelFondoLayout.createSequentialGroup()
                        .addComponent(botonBuscar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jpBotones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanelFondoLayout.setVerticalGroup(
            jPanelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFondoLayout.createSequentialGroup()
                .addGroup(jPanelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelFondoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jbCerrar))
                    .addComponent(jlTitulo))
                .addGroup(jPanelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelFondoLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(jPanelFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jpBotones, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jpDatos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanelFondoLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(botonBuscar)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(279, 279, 279))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelFondo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelFondo, javax.swing.GroupLayout.PREFERRED_SIZE, 565, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGuardarActionPerformed
        
        try{
            
            // valido campos vacios
            if (jtDni.getText().trim().isEmpty()||
                    jtApellido.getText().trim().isEmpty()||
                    jtNombre.getText().trim().isEmpty() ||
                    jDateChooser1.getDate()== null ||
                    jtEstado.getText().trim().isEmpty()
                    
                    ){
                JOptionPane.showMessageDialog(this, "Por favor complete los campos");
                return;
            }
            
            
            // conversion de los datos ingresadeos
            
            
            Integer dni = Integer.parseInt(jtDni.getText());
            String apellido = jtApellido.getText();
            String nombre = jtNombre.getText();
            Date fecha = jDateChooser1.getDate();
            LocalDate fechaNacimiento = fecha.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            Integer estado = Integer.parseInt(jtEstado.getText());
            
            //creamos alumno el cual le asignamos los datos ingresados
            
            alumno a = new alumno( dni, apellido, nombre, fechaNacimiento, estado);
            
            // lo guardqamos en la base de datos
            aluData.guardarAlumno(a);
            
            
            JOptionPane.showMessageDialog(this, "Alumno guardado correctamente");
            
        
            
        
            limpiarCampos();
        }catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(this, "El dni y el estado deben ser de caracter numerico");
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "Error al guardar el alumno"+e.getMessage());
        }
    }//GEN-LAST:event_jbGuardarActionPerformed

    private void botonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBuscarActionPerformed
      
        try{
            
        
        
            // validadamos el campo vacio
            
        if(jtDni.getText().trim().isEmpty()){
            JOptionPane.showMessageDialog(this, "Debe ingresar un dni a buscar");
            
        }
    
            //validamos q sea un numero
        int dni = Integer.parseInt(jtDni.getText());
       
       // buscamos un alumno en la base de datos
       alumno a= aluData.buscarAlumnonDni(dni);
       
       if(a != null){
           // cargamos los datos de jtext

           jtApellido.setText(a.getApellido());
           jtNombre.setText(a.getNombre());
           jtEstado.setText(String.valueOf(a.getEstado()));
           jDateChooser1.setDate(java.sql.Date.valueOf(a.getFechaNacimiento()));
           
           
       }else{
           JOptionPane.showMessageDialog(this, "no se encontro el alumno con ese dni");
           
           limpiarCampos();
           
       }
        }catch(NumberFormatException e){
            JOptionPane.showMessageDialog(this, "El dni debe de ser de caracter numerico ");
       limpiarCampos();
        //nos volvemos a posicionar en el jtext dni
         jtDni.requestFocus();
         
        }catch(Exception ex){
            JOptionPane.showMessageDialog(this, "Error al buscar el alumno");
        }
       
    }//GEN-LAST:event_botonBuscarActionPerformed

    private void jbAltaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAltaActionPerformed
       
        try{
             int dni= Integer.parseInt(jtDni.getText().trim());
        
        //buscamos el alumno 
        alumno a = aluData.buscarAlumnonDni(dni);

        // validadamos el campo vacio
        if (jtDni.getText().trim().isEmpty()||
                    jtApellido.getText().trim().isEmpty()||
                    jtNombre.getText().trim().isEmpty() ||
                    jDateChooser1.getDate()== null ||
                    jtEstado.getText().trim().isEmpty()
                    
                    ){
                JOptionPane.showMessageDialog(this, "Por favor complete los campos");
                return;
            }
            
       
        
        if(a !=null){
            int confirmar = JOptionPane.showConfirmDialog(this, "Desea dar de Alta al alumno "+a.getNombre()+", "+a.getApellido()+"?",
                    "Confirmar Alta", JOptionPane.YES_NO_OPTION);
            
            
            if(confirmar == JOptionPane.YES_OPTION){
                aluData.darAlta(a.getIdAlumno());
                limpiarCampos();
            }
            
        }else{
            JOptionPane.showMessageDialog(this, "No se encontro ningun alumno con ese dni");
        }
        
        
        }catch (NumberFormatException e){
            JOptionPane.showMessageDialog(this, "El dni debe de ser de caracter numerico");
             //nos volvemos a posicionar en el jtext dni
         jtDni.requestFocus();
         
         
        }catch(Exception ex){
            JOptionPane.showMessageDialog(this, "Error al dar de Alta al alumno");
            limpiarCampos();
        }
    }//GEN-LAST:event_jbAltaActionPerformed

    private void jbBajaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBajaActionPerformed
        
        

        try{

        // validadamos el campo vacio
            
      
        
        int dni= Integer.parseInt(jtDni.getText().trim());
        
        //buscamos el alumno 
        alumno a = aluData.buscarAlumnonDni(dni);
        
        if (jtDni.getText().trim().isEmpty()||
                    jtApellido.getText().trim().isEmpty()||
                    jtNombre.getText().trim().isEmpty() ||
                    jDateChooser1.getDate()== null ||
                    jtEstado.getText().trim().isEmpty()
                    
                    ){
                JOptionPane.showMessageDialog(this, "Por favor complete los campos");
                return;
            }
        
        if(a !=null){
            int confirmar = JOptionPane.showConfirmDialog(this, "Desea dar de baja al alumno "+a.getNombre()+", "+a.getApellido()+"?",
                    "Confirmar baja", JOptionPane.YES_NO_OPTION);
            
            
            if(confirmar == JOptionPane.YES_OPTION){
                aluData.darBaja(a.getIdAlumno());
                limpiarCampos();
            }
            
        }else{
            JOptionPane.showMessageDialog(this, "No se encontro ningun alumno con ese dni");
        }
        }catch (NumberFormatException e){
            JOptionPane.showMessageDialog(this, "El dni debe de ser de caracteer numerico");
             //nos volvemos a posicionar en el jtext dni
         jtDni.requestFocus();
        }catch(Exception ex){
            JOptionPane.showMessageDialog(this, "Error al dar de baja al alumno");
            limpiarCampos();
        }
        
    }//GEN-LAST:event_jbBajaActionPerformed

    private void jbActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbActualizarActionPerformed
        
        
        
        try{
        //validacion de campos
         if (jtDni.getText().trim().isEmpty()||
                    jtApellido.getText().trim().isEmpty()||
                    jtNombre.getText().trim().isEmpty() ||
                    jDateChooser1.getDate()== null ||
                    jtEstado.getText().trim().isEmpty()
                    
                    ){
                JOptionPane.showMessageDialog(this, "Por favor complete los campos");
                return;
            }
         
         
         // convertimos los valores
             Integer dni = Integer.parseInt(jtDni.getText());
            String apellido = jtApellido.getText();
            String nombre = jtNombre.getText();
            Date fecha = jDateChooser1.getDate();
            LocalDate fechaNacimiento = fecha.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            Integer estado = Integer.parseInt(jtEstado.getText());
         
            
            // buscamos el alumno para obtener su id
            
            
            alumno a= aluData.buscarAlumnonDni(dni);
            
            
            if(a== null){
                JOptionPane.showMessageDialog(this, "no se encontro un alumno con ese dni");
                limpiarCampos();
            
            }
            
            
            // Actualizamos atributos con los nuevos valores
            
            
            a.setApellido(apellido);
            a.setNombre(nombre);
            a.setFechaNacimiento(fechaNacimiento);
            a.setEstado(estado);
            
            
            // guardamos cambios en la base de datos 
            
            aluData.actualizarAlumno(a);
            
            JOptionPane.showMessageDialog(this, "Alumno actualizado correctamente");
            
            limpiarCampos();
        }catch (NumberFormatException e){
            
            JOptionPane.showMessageDialog(this, "El DNI y el Estado deben de ser numeros enteros");
            limpiarCampos();
        }catch(Exception ex){
            JOptionPane.showMessageDialog(this, "Error al actualizar el alumno" + ex.getMessage());
            limpiarCampos();
        }
            
         
        
        
        
        
    }//GEN-LAST:event_jbActualizarActionPerformed

    private void jbEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEliminarActionPerformed
       
        //validacion de campos
         if (jtDni.getText().trim().isEmpty()||
                    jtApellido.getText().trim().isEmpty()||
                    jtNombre.getText().trim().isEmpty() ||
                    jDateChooser1.getDate()== null ||
                    jtEstado.getText().trim().isEmpty()
                    
                    ){
                JOptionPane.showMessageDialog(this, "Por favor complete los campos");
                return;
            }
         
         
         // convertimos los valores
             Integer dni = Integer.parseInt(jtDni.getText());
        
        // buscamos el alumno para obtener su id
            
            
            alumno a= aluData.buscarAlumnonDni(dni);
            
            
             if(a !=null){
            int confirmar = JOptionPane.showConfirmDialog(this, "Esta seguro que desea eliminar al alumno:  "+a.getNombre()+", "+a.getApellido()+"?",
                    "Confirmar Eliminacion", JOptionPane.YES_NO_OPTION);
            
            
            if(confirmar == JOptionPane.YES_OPTION){
                aluData.eliminarAumno(a.getIdAlumno());
                limpiarCampos();                           
            }
            
          
            
            
        
        
             }  
    }//GEN-LAST:event_jbEliminarActionPerformed

    private void jbListarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbListarActionPerformed
        
        
        //Limpio las filas existentes en mi tabla
        limpiarTabla(); 
        
        
        List<alumno> listita = aluData.listarAlumnosActivos();
        
        for(alumno alu : listita){
            modelo.addRow(new Object[]{
             alu.getIdAlumno(),
             alu.getDni(),
             alu.getApellido(),
             alu.getNombre(),
             alu.getFechaNacimiento(),
             alu.getEstado()
            });
            
        }
        
        
        
        
        
    }//GEN-LAST:event_jbListarActionPerformed

    private void jbCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCerrarActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jbCerrarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonBuscar;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelApellido;
    private javax.swing.JLabel jLabelDni;
    private javax.swing.JLabel jLabelNombre;
    private javax.swing.JPanel jPanelFondo;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JTable jTable;
    private javax.swing.JButton jbActualizar;
    private javax.swing.JButton jbAlta;
    private javax.swing.JButton jbBaja;
    private javax.swing.JButton jbCerrar;
    private javax.swing.JButton jbEliminar;
    private javax.swing.JButton jbGuardar;
    private javax.swing.JButton jbListar;
    private javax.swing.JLabel jlTitulo;
    private javax.swing.JPanel jpBotones;
    private javax.swing.JPanel jpDatos;
    private javax.swing.JTextField jtApellido;
    private javax.swing.JTextField jtDni;
    private javax.swing.JTextField jtEstado;
    private javax.swing.JTextField jtNombre;
    // End of variables declaration//GEN-END:variables
    
    private void cabecera(){
        modelo.addColumn("Id");
        modelo.addColumn("DNI");
        modelo.addColumn("Apellido");
        modelo.addColumn("Nombre");
        modelo.addColumn("Fecha");
        modelo.addColumn("Estado");
        
        jTable.setModel(modelo);
    }
    
    
    private void limpiarCampos(){
        jtDni.setText("");
        jtApellido.setText("");
        jtNombre.setText("");
        jtEstado.setText("");
        jDateChooser1.setDate(null); 
    }
    
    
    private void limpiarTabla(){
        modelo.setRowCount(0);
    }
    
    
}
